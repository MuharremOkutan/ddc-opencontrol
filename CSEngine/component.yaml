documentation_complete: false
schema_version: 3.1.0
name: Commercially Supported Docker Engine
references:
  - name: CS Docker Engine Installation Documentation
    path: https://docs.docker.com/cs-engine/install/
    type: URL
  - name: CS Docker Engine Release Notes
    path: https://docs.docker.com/cs-engine/release-notes/release-notes/
    type: URL
  - name: Configuring and Running Docker on Various Distributions
    path: https://docs.docker.com/engine/admin/
    type: URL
  - name: Docker Engine Security
    path: https://docs.docker.com/engine/security/security/
    type: URL
  - name: Configure Docker Engine Logging Drivers
    path: https://docs.docker.com/engine/admin/logging/overview/
    type: URL
  - name: Docker Engine Remote API
    path: https://docs.docker.com/engine/reference/api/docker_remote_api/
    type: URL
satisfies:
  - control_key: AC-2 (12)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          'To assist the organization in meeting the requirements of this
          control, CS Docker Engine can be configured to aggregate container and
          daemon events via a number of logging drivers. Supporting
          documentation can be found at the following resources:

          - https://docs.docker.com/engine/admin/logging/view_container_logs/
          - https://docs.docker.com/engine/admin/logging/overview/
          - https://docs.docker.com/engine/admin/logging/log_tags/'
    standard_key: NIST-800-53

  - control_key: AC-4
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: |
          'CS Docker Engine can be configured to control the flow of information
          that originates from applications running in containers. Docker
          container networking can be configured to meet this control''s
          requirements by referencing the documentation at
          https://docs.docker.com/engine/userguide/networking/. In addition, a
          detailed reference architecture for designing scalable and portable
          Docker container networks can be found at
          http://success.docker.com/Datacenter/Apply/Docker_Reference_Architecture%3A_Designing_Scalable%2C_Portable_Docker_Container_Networks.'
    standard_key: NIST-800-53

  - control_key: AC-4 (8)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: |
          'CS Docker Engine can be configured to control the flow of information
          that originates from applications running in containers per
          organization-defined security policy filters. Docker container
          networking can be configured to meet this control''s requirements by
          referencing the documentation at
          https://docs.docker.com/engine/userguide/networking/. A detailed
          reference architecture for designing scalable and portable Docker
          container networks can be found at
          http://success.docker.com/Datacenter/Apply/Docker_Reference_Architecture%3A_Designing_Scalable%2C_Portable_Docker_Container_Networks.
          
          There are also third-party behavioral activity monitoring tools (e.g.
          Sysdig Falco <http://www.sysdig.org/falco/>) that can be used
          alongside CS Docker Engine to satisfy this control''s requirements.'
    standard_key: NIST-800-53

  - control_key: AC-4 (21)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
      - configured by customer
    narrative:
      - text: |
          'CS Docker Engine can be configured to separate the flow of
          information that originates from applications running in containers.
          Docker container networking can be configured to meet this control''s
          requirements by referencing the documentation at
          https://docs.docker.com/engine/userguide/networking/. In addition, a
          detailed reference architecture for designing scalable and portable
          Docker container networks can be found at
          http://success.docker.com/Datacenter/Apply/Docker_Reference_Architecture%3A_Designing_Scalable%2C_Portable_Docker_Container_Networks.'
    standard_key: NIST-800-53

  - control_key: AC-17 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine logs and controls all local and remote access
          events. In addition, auditing can be configured on the underlying
          operating system to meet this control.'
    standard_key: NIST-800-53

  - control_key: AC-17 (2)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'All remote access sessions to CS Docker Engine are protected with
          Transport Layer Security (TLS) 1.2. In addition to this, all
          communication to CS Docker Engine is enforced by way of two-way mutual
          TLS authentication.'
    standard_key: NIST-800-53

  - control_key: AC-17 (3)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'A combination of managed load balancers, firewalls and access control
          lists, and virtual networking resources can be used to ensure traffic
          destined for CS Docker Engine is routed through managed network access
          control points.'
    standard_key: NIST-800-53

  - control_key: AC-17 (9)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - configured by customer
    narrative:
      - text: |
          'Built-in firewall technology in CS Docker Engine's underlying
          operating system can be used to force the disconnection of remote
          connections to the host. In addition, CS Docker Engine provides the
          option to pause or drain a node in the cluster, which subsequently
          stops and/or removes sessions to the node. Individual services and/or
          applications running on CS Docker Engine can also be stopped and/or
          removed.'
    standard_key: NIST-800-53

  - control_key: AU-2
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          'Both Universal Control Plane and Docker Trusted Registry backend
          service containers, all of which reside on CS Docker Engine, log all
          of the event types indicated by this control (as explained by their
          component narratives). These and other application containers that
          reside on CS Docker Engine can be configured to log data via an
          appropriate Docker logging driver. Instructions for configuring
          logging drivers can be found at
          https://docs.docker.com/engine/admin/logging/overview/.'
    standard_key: NIST-800-53

  - control_key: AU-3
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'Both Universal Control Plane and Docker Trusted Registry are pre-configured to take advantage of CS Docker Engine''s built-in logging mechanisms. Further configuration of CS Docker Engine logging can be done by refering to the guidance at https://docs.docker.com/engine/admin/logging/overview/. A sample audit event recorded by CS Docker Engine has been provided below:

          {"level":"info","license_key":"123456789123456789123456789","msg":"eNZi:Password
          based auth
          suceeded","remote_addr":"192.168.33.1:55905","time":"2016-11-09T22:41:01Z","type":"auth
          ok","username":"dockeruser"}'
    standard_key: NIST-800-53
  
  - control_key: AU-3 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine can be configured with various logging drivers to
          send audit events to an external logging stack. Instructions for doing
          so can be found at
          https://docs.docker.com/engine/admin/logging/overview/. The logging
          stack can subsequently be used to interpolate the information defined
          by this control from the logged audit records.'
    standard_key: NIST-800-53

  - control_key: AU-5
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine can be configured with various logging drivers to
          send audit events to an external logging stack. Instructions for doing
          so can be found at
          https://docs.docker.com/engine/admin/logging/overview/. The logging
          stack can subsequently be used to interpolate the information defined
          by this control. The logging stack can subsequently be configured to
          alert on any audit processing failures.'
    standard_key: NIST-800-53

  - control_key: AU-7
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          'CS Docker Engine can be configured with various logging drivers to
          send audit events to an external logging stack. Instructions for doing
          so can be found at
          https://docs.docker.com/engine/admin/logging/overview/. The logging
          stack can subsequently be used to facilitate the audit reduction and
          report generation requirements of this control.'
      - key: b
        text: |
          'The underlying operating system chosen to support CS Docker Engine
          should be certified to ensure that logs are not altered during
          generation and transmission to a remote logging stack.'
    standard_key: NIST-800-53
  
  - control_key: AU-7 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine can be configured with various logging drivers to
          send audit events to an external logging stack. Instructions for doing
          so can be found at
          https://docs.docker.com/engine/admin/logging/overview/. The logging
          stack can subsequently be configured to parse information by
          organization-defined audit fields.'
    standard_key: NIST-800-53

  - control_key: AU-8
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - configured by customer
    narrative:
      - key: a
        text: |
          'CS Docker Engine uses the system clock of the underlying operating
          system on which it runs. This behavior cannot be modified.'
      - key: b
        text: |
          'The underlying operating system on which CS Docker Engine runs should
          be configured such that its system clock uses Coordinated Universal
          Time (UTC) as indicated by this control. Refer to the operating
          system's instructions for doing so.'
    standard_key: NIST-800-53

  - control_key: AU-8 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          'The underlying operating system on which CS Docker Engine runs should
          be configured such that its system clock compares itself with an
          authoritative time source as indicated by this control. This can be
          accomplished by utilizing the Network Time Protocol (NTP). Refer to
          the operating system's instructions for doing so.'
      - key: b
        text: |
          'The underlying operating system on which CS Docker Engine runs should
          be configured such that its system clock synchronizes itself to an
          authoritative time source as defined by part (a) of this control any
          time the time difference exceeds that of the organization-defined time
          period. This can be accomplished by utilizing the Network Time
          Protocol (NTP). Refer to the operating system's instructions for doing
          so.'
    standard_key: NIST-800-53

  - control_key: AU-9
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'On the underlying Linux operating system supporting CS Docker Engine,
          only root and sudo users and users that have been added to the
          "docker" group have the ability to access the logs generated by UCP
          backend service containers. Should the organization decide to
          configure CS Docker Engine to use a logging driver other than the
          default json-file driver, the organization is subsequently responsible
          for configuring the chosen logging stack per the provisions of this
          control. Instructions for configuring an altnernate logging driver can
          be found at https://docs.docker.com/engine/admin/logging/overview/.

          In addition, for Linux operating systems supporting CS Docker Engine
          that use the systemd daemon, it is imperative that the Journal is
          secured per the requirements of this control. The same applies for
          Linux operating systems supporting CS Docker Engine that instead use
          upstart.'
    standard_key: NIST-800-53

  - control_key: AU-9 (2)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine can be configured to use a logging driver that can
          subsequently meet the backup requirements of this control.
          Instructions for doing so can be found at
          https://docs.docker.com/engine/admin/logging/overview/.'
    standard_key: NIST-800-53

  - control_key: AU-11
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'The organization will be responsible for meeting the requirements of
          this control. To assist with these requirements, CS Docker Engine can
          be configured to use a logging driver that stores data in a location
          for the duration specified by this control. Instructions for doing so
          can be found at
          https://docs.docker.com/engine/admin/logging/overview/.'
    standard_key: NIST-800-53

  - control_key: AU-12
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - key: a
        text: |
          'Both Universal Control Plane and Docker Trusted Registry backend
          service containers, all of which reside on CS Docker Engine, log all
          of the event types indicated by this AU-2 a. These and other
          application containers that reside on CS Docker Engine can be
          configured to log data via an appropriate Docker logging driver.
          Instructions for configuring logging drivers can be found at
          https://docs.docker.com/engine/admin/logging/overview/.

          The underlying Linux operating system supporting CS Docker Engine can
          be configured to audit Docker-specific events with the auditd daemon.
          Refer to the specific Linux distribution in use for instructions on
          configuring this service.'
      - key: b
        text: |
          'Using auditd on the Linux operating system supporting CS Docker
          Engine, the organization can configure audit rules to select which
          Docker-specific events are to be audited. Refer to the specific Linux
          distribution in use for instructions on configuring this service.'
    standard_key: NIST-800-53

  - control_key: CM-5 (3)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'Before installing CS Docker Engine, ensure that your supporting Linux
          operating system''s packager manager supports package signature
          verification and that it is enabled. It is also required that you
          import the Docker public key for CS packages so as to retrieve the
          validated and signed package from Docker, Inc. Refer to your Linux OS
          documentation for instructions on completing the above steps.

          In addition, Docker Content Trust is a capability provided by CS
          Docker Engine that enforces client-side signing and verification of
          Docker image tags. It provides the ability to use digital signatures
          for data sent to and received from Docker Trusted Registry and the
          public Docker Store. These signatures allow client-side verification
          of the integrity and publisher of specific image tags. When enabling
          Docker Content Trust in CS Docker Engine (per the instructions at
          https://docs.docker.com/engine/security/trust/content_trust/), you can
          enforce the use of signed Docker images.'
    standard_key: NIST-800-53

  - control_key: CM-6 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'The organization is responsible for meeting the requirements of this
          control. To assist with these requirements, the organization can
          incorporate the use of an external configuration management system to
          meet the requirements of this control.'
    standard_key: NIST-800-53

  - control_key: CM-7 (2)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'In order to restrict which Docker images can be used to deploy
          applications to CS Docker Engine, the organization must define a list
          of allowed base Docker images and make them available via Docker
          Trusted Registry. The organization must also prevent users from being
          able to pull Docker images from untrusted sources.'
    standard_key: NIST-800-53

  - control_key: CM-7 (5)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'The organization is responsible for meeting the requirements of this
          control. To assist with these requirements and in order to restrict
          which Docker images can be used to deploy applications to CS Docker
          Engine, the organization must define a list of allowed base Docker
          images and make them available via Docker Trusted Registry. The
          organization must also prevent users from being able to pull Docker
          images from untrusted sources.'
    standard_key: NIST-800-53

  - control_key: IA-3
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'In order for other CS Engine nodes to be able to join a cluster
          managed by Universal Control Plane, they must be identified and
          authenticated via either a manager or worker token. Use of the token
          includes trust on first use mutual TLS.'
    standard_key: NIST-800-53

  - control_key: SA-10 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'Docker Content Trust gives you the ability to verify both the
          integrity and the publisher of all the data received from a Docker
          Trusted Registry over any channel. It allows operations with a remote
          DTR instance to enforce client-side signing and verification of image
          tags. It provides for the ability to use digital signatures for data
          sent to and receive from remote DTR instances. These signatures allow
          client-side verification of the integrity and publisher of specific
          image tags.'
    standard_key: NIST-800-53

  - control_key: SC-12 (2)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine can be installed on the following operating systems:
          CentOS 7.1+, Red Hat Enterprise Linux 7.0+, Ubuntu 14.04 LTS+, and
          SUSE Linux Enterprise 12+. In order to meet the requirements of this
          control, reference the chosen operating system's documentation to
          ensure it is configured in FIPS mode.'
    standard_key: NIST-800-53

  - control_key: SC-13
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'CS Docker Engine can be installed on the following operating systems:
          CentOS 7.1+, Red Hat Enterprise Linux 7.0+, Ubuntu 14.04 LTS+, and
          SUSE Linux Enterprise 12+. In order to meet the requirements of this
          control, reference the chosen operating system's documentation to
          ensure it is configured in FIPS mode.'
    standard_key: NIST-800-53

  - control_key: SC-23
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'All remote access sessions to CS Docker Engine are protected with
          Transport Layer Security (TLS) 1.2 with the AES GCM cipher. In
          addition to this, all communication to and between CS Docker Engines
          is enforced by way of two-way mutual TLS authentication.'
    standard_key: NIST-800-53

  - control_key: SC-28 (1)
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - service provider system specific
    narrative:
      - text: |
          'All remote access sessions to CS Docker Engine are protected with
          Transport Layer Security (TLS) 1.2 with the AES GCM cipher. In
          addition to this, all communication to and between CS Docker Engines
          is enforced by way of two-way mutual TLS authentication.'
    standard_key: NIST-800-53

  - control_key: SI-16
    covered_by: []
    implementation_statuses:
      - complete
    control_origins:
      - configured by customer
    narrative:
      - text: |
          'CS Docker Engine can be installed on the following operating systems:
          CentOS 7.1+, Red Hat Enterprise Linux 7.0+, Ubuntu 14.04 LTS+, and
          SUSE Linux Enterprise 12+. In order to meet the requirements of this
          control, reference the chosen operating system's security
          documentation for information regarding the protection of memory from
          unauthorized code execution.'
    standard_key: NIST-800-53
